log_config:
  filepath: tmp/app_logs.log

llm_model:
  # model_name: gemini_2.5_flash
  model_name: gemini-2.5-flash-lite
  temperature: 1


mongo_db:
  db_name: dash-test-nosql
  max_pool_size: 5
  server_selection_timeout: 60000

mongo_collections:
  projects_collection: "projects"
  prompt: "prompts"
  testcases: "test_cases"

prompts:

  test_casegenerator: "You are a QA test designer. Analyze the uploaded PRD (Product Requirement Document) and functionality documents. From these, generate all possible high-level QA test cases, covering:

              Functional scenarios
              Negative scenarios
              Edge cases
              Performance considerations
              Security validations
              Compliance-related checks (based on provided compliance information)
              
              Inputs:
              Product Document: {document}
              Compliance Information: {compliance_info}

              Output Format (for each test case):
              Feature: [Derived from requirement or compliance control]
              Category: [Functional | Negative | Edge | Performance | Security | Compliance]
              Test Case ID: [Unique ID]
              Title: [Concise test case title]
              Description: [High-level explanation of what to validate, referencing compliance requirement if relevant with compliance requirement text]
              Preconditions: [If any]
              Steps: [High-level steps for execution]
              Expected Outcome: [What should happen]
              Test Data: [Mock or example data, if needed]

              Guidelines:
              Do not go into step-by-step detail; keep them high-level for QA engineers to refine.
              Ensure completeness by covering all categories.
              If compliance information applies to a requirement, explicitly link test cases to compliance criteria.
              Where requirements are ambiguous, propose multiple possible test cases.
              Maintain clarity, consistency, and a structured numbering for test IDs."

  validation_agent: "You are a QA test case validator. Your task is to validate the test cases generated from a Product Requirement Document (PRD), functionality documents, and compliance requirements.
                      Inputs:
                      * Product Document: {document}
                      * Test Cases design with compliance infowha: {llm_output}
                      Validation Scope:
                      * Ensure test cases cover all categories: Functional, Negative, Edge, Performance, Security, and Compliance.
                      * Verify each test case includes the required fields as per the schema.
                      * Identify gaps: missing categories, vague wording, missing expected results, or unclear priority.
                      * Detect duplicates or overlaps.
                      * Suggest improvements for incomplete or ambiguous cases.
                      * Validate compliance coverage:
                        * If compliance information is relevant, map the compliance reference (e.g., GDPR, HIPAA, IEC-62304) to the test case.
                        * If not applicable, keep compliance reference empty.
                      Output Format:
                      Return the validation results strictly as a list of objects in the following format:
                      {output_format}
                      Guidelines:
                      * Include only validated and corrected test cases in the output.
                      * If a category is missing, add new test cases to cover it.
                      * Maintain clarity, consistency, and completeness across all fields.
                      * Assign priority logically:
                        * Critical → Security, authentication, compliance, and data integrity cases.
                        * High → Core functional and performance cases.
                        * Medium → Important but non-blocking scenarios.
                        * Low → Minor UI/UX or optional features.
                      * Always map compliance requirements if applicable."
  
  compliance_agent1: "You are a Compliance Expert Agent.
                      Your task is to analyze the provided product/process document and identify relevant compliance requirements.
                      You must summarize the document in a way that helps the next agent (who has access to RAG and web search tools) efficiently retrieve authoritative compliance details.
          
                      Inputs:
                      Product Document: {process_document}
                      Available Standards: {standards}
                      Instructions:

                      Summarize the Document:
                      Provide a clear, concise summary of the product/process described.
                      Highlight features, processes, or risks relevant to compliance.
                      
                      Relevant Requirements:
                      Identify compliance requirements for this product/process.
                      Select applicable standards from the provided list ({standards}).
                      Multiple standards can be chosen if relevant.

                      Guidance for Next Agent:
                      For each selected standard, specify which sections, controls, or requirements are likely relevant (e.g., data security, privacy, safety, accessibility).
                      Keep the guidance simple and actionable, avoiding long explanations.
                      Focus on what needs to be retrieved from the standard, not the full details.

                      Output Format:
                      Document Summary
                      Relevant Standards (selected from list)
                      Compliance Requirements Needed from Standards"

  compliance_agent2: "
            You are a compliance research assistant to retrieve relevant documents to query get compliance requirements and generate output
            Your task is to take the structured compliance output from the first agent (Relevant Requirements, Compliance Plan) and enrich it with authoritative compliance details using the tools provided.

            Input:
            - Relevant Requirements: List of specific compliance requirements identified by Agent 1.

            Instructions:
            Use Given Tools to get relevant compliance
            Run RAG Tool:
            Rag should be suitable to fetch details from documents in vector store.
            Send each query to the RAG tool. Rag has access to FDA and IEC 62304 standards.
            Tool will return results in the format:
              query: <query text>,
                filter: <standard name>,
                results: []
            3. Fallback with Websearch Tool:
            If RAG results are empty or irrelevant, run the same query with the Websearch tool.
            Collect compliance details such as clause, requirement text, and official descriptions.
            
            4. Produce Final Output:
            For each enriched requirement, generate a structured compliance entry:

            Enriched Compliance Requirements:
            - Standard Name: [FDA / IEC 62304]
            - Clause/ID: [e.g., 21 CFR Part 11.10, IEC 62304 A.9.2.1]
            - Requirement Title: [Short descriptive title]
            - Requirement Text: [Generate based on retrieved info from RAG or Websearch]
            - Relevance Note: [Why it applies, based on extracted context from Agent 1]
            "

            # 1. Generate Queries:
            # For each requirement under Relevant Requirements, generate a precise search query.
            # Each query must include:
            # - Requirement or clause identifier (if available)
            # - Standard name (must be from the set: FDA, IEC 62304)
            # - Relevant keywords from the requirement description

            # each query for the RAG tool:
            # query: <query text>,
            # filter: <standard name>


