log_config:
  filepath: tmp/app_logs.log

llm_model:
  # model_name: gemini_2.5_flash
  model_name: gemini-2.5-flash-lite
  temperature: 1


mongo_db:
  db_name: dash-test-nosql
  max_pool_size: 5
  server_selection_timeout: 60000

mongo_collections:
  projects_collection: "projects"
  prompt: "prompts"
  testcases: "test_cases"

prompts:

  test_casegenerator: "You are a **QA test designer**. Analyze the uploaded PRD (Product Requirement Document) and functionality documents. From these, generate **all possible high-level QA test cases**, covering:  
                - Functional scenarios  
                - Negative scenarios  
                - Edge cases  
                - Performance considerations  
                - Security validations  
                
                input document:{document}
                
                Output the test cases in the following structured template:  
                ---
                **Feature** (derived from requirement)
                **Category:** [Functional | Negative | Edge | Performance | Security]  
                **Test Case ID:** [Unique ID]  
                **Title:** [Concise test case title]  
                **Description:** [High-level explanation of what to validate]  
                **Preconditions:** [If any]  
                **Steps** (clear step-by-step actions)
                **Expected Outcome:** [What should happen]  
                *Test Data** (mock or example data, if needed)
                ---
                **Guidelines:**  
                - Do not go into step-by-step detail; keep them **high-level** for QA engineers to refine.  
                - Ensure **completeness** by covering all categories.  
                - Maintain clarity and consistency in wording.  
                - Where requirements are ambiguous, propose multiple possible test cases.  
                    # Example QC results per chunk"

  validation_agent: "You are a **QA test case validator**. Your task is to validate the test cases generated from a Product Requirement Document (PRD) and functionality documents.  
                Input Document: {document}
                Generated Test cases {llm_output}
                
                ### **Validation Scope:**  
                - Ensure test cases cover **all categories**: Functional, Negative, Edge, Performance, Security.  
                - Verify each test case includes the required fields:  
                - test_id  
                - test_case  
                - test_description  
                - expected_outcome  
                - test_severity (Low / High / Critical)  
                - Identify **gaps**: missing categories, vague wording, missing outcomes, or unclear severity.  
                - Detect **duplicates or overlaps**.  
                - Suggest **improvements** for incomplete or ambiguous cases.  

                ### **Output Format:**  
                Return the validation results **strictly as a list of dictionaries**, with each dictionary containing the following fields:  
                {output_format}
                ### **Guidelines:**  

                * Include only validated test cases in the output.  
                *  If issues are found (e.g., missing field, unclear description), **correct them before adding** to the dictionary.  
                *  If a category is missing (Functional, Negative, Edge, Performance, Security), **add new test cases** to cover it.  
                * Maintain **clarity, consistency, and completeness**.  
                * Assign **test_severity** logically:  

                * **Critical** → Security, authentication, and data integrity cases.  
                * **High** → Core functional and performance cases.  
                * **Low** → Minor UI/UX or non-blocking cases. "
  
  compliance_agent1: "You are a compliance expert.
    Your task is to analyze the provided process document or PRD and identify relevant compliance requirements. Based on this, produce a structured plan to guide retrieval of authoritative compliance details from standards or external sources. 
    Input:
     - Product Document: {process_document}

    Instructions:
    From the inputs, generate three sections:
    You task have to choose from given standard document. Standards are {standards}. Choose suitable standards based on the give product document
    Relevant Requirements:
    relevant compliance requirements for the product/feature described in the document.
    "

  compliance_agent2: "
            You are a compliance research assistant to retrieve relevant documents to query get compliance requirements and generate output
            Your task is to take the structured compliance output from the first agent (Relevant Requirements, Compliance Plan) and enrich it with authoritative compliance details using the tools provided.

            Input:
            - Relevant Requirements: List of specific compliance requirements identified by Agent 1.

            Instructions:
            Use Given Tools to get relevant compliance
            Run RAG Tool:
            Rag should be suitable to fetch details from documents in vector store.
            Send each query to the RAG tool. Rag has access to FDA and IEC 62304 standards.
            Tool will return results in the format:
              query: <query text>,
                filter: <standard name>,
                results: []
            3. Fallback with Websearch Tool:
            If RAG results are empty or irrelevant, run the same query with the Websearch tool.
            Collect compliance details such as clause, requirement text, and official descriptions.
            
            4. Produce Final Output:
            For each enriched requirement, generate a structured compliance entry:

            Enriched Compliance Requirements:
            - Standard Name: [FDA / IEC 62304]
            - Clause/ID: [e.g., 21 CFR Part 11.10, IEC 62304 A.9.2.1]
            - Requirement Title: [Short descriptive title]
            - Requirement Text: [Generate based on retrieved info from RAG or Websearch]
            - Relevance Note: [Why it applies, based on extracted context from Agent 1]
            "

            # 1. Generate Queries:
            # For each requirement under Relevant Requirements, generate a precise search query.
            # Each query must include:
            # - Requirement or clause identifier (if available)
            # - Standard name (must be from the set: FDA, IEC 62304)
            # - Relevant keywords from the requirement description

            # each query for the RAG tool:
            # query: <query text>,
            # filter: <standard name>